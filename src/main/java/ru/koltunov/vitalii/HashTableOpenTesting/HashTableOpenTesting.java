package ru.koltunov.vitalii.HashTableOpenTesting;

import java.util.ArrayList;
import java.util.Objects;
import java.util.Scanner;

class Main {
    public static void main(String[] args) {
//        scannerTest();
        simpleTest();
    }

    public static void simpleTest() {
        HashTableOpenTesting h1 = new HashTableOpenTesting();
        h1.push("aiv");
        for (int i = 0; i < h1.capacity; i++) {
            System.out.println(i);
        }
//        h1.push("yvbem");
//        System.out.println(h1.search("aiv"));
//        System.out.println(h1.search("woxfyobo"));
//        System.out.println(h1.pop("guq"));
//        System.out.println(h1.pop("prhw"));
//        System.out.println(h1.pop("aiv"));
//        h1.push("jv");
//        System.out.println(h1.pop("aiv"));
//        h1.push("ubcf");
    }



    public static void scannerTest() {
        HashTableOpenTesting h1 = new HashTableOpenTesting();
        Scanner scanner = new Scanner(System.in);
        int requests = scanner.nextInt();
        for (int i = 0; i < requests; i++) {
            String cmd = scanner.nextLine();
            String[] s = cmd.split(" ");
            switch (s[0]) {
                case "push" -> h1.push(s[1]);
                case "search" -> {
                    if (h1.search(s[1])) {
                        System.out.println("TRUE");
                    } else {
                        System.out.println("FALSE");
                    }
                }
                case "pop" -> {
                    if (h1.pop(s[1])) {
                        h1.pop(s[1]);
                        System.out.println("TRUE");
                    } else {
                        System.out.println("FALSE");
                    }
                }
            }
        }
    }
}

public class HashTableOpenTesting {
    static final int seed = 3;
    private final static int threshold = 2;
    int capacity = 10;
    int filledElem = 0;
    ArrayList<Node> hashTable;

    public HashTableOpenTesting() {
        this.hashTable = new ArrayList<>();
        for (int i = 0; i < capacity; i++) {
            hashTable.add(new Node());
        }
    }

    public static int hashF1(String s, int capacity) {
        int prime = 1;
        int hash = 0;

        for (int i = 0; i < s.length(); i++) {
            hash += prime * i;
            hash = hash % capacity;
            prime = prime * (seed - 1);
        }
        return hash;
    }

    public static int hashF2(String s, int capacity) {
        int prime = 1;
        int hash = 0;

        for (int i = 0; i < s.length(); i++) {
            hash += prime * i;
            hash = hash % capacity;
            prime = prime * (seed + 1);
        }
        return hash;
    }

    boolean search(String s) {
        int hashF1 = hashF1(s, capacity);
        int hashF2 = hashF2(s, capacity);
        int inx = hashF1;
        int countIterations = 0;
        for (int i = 0; i < hashTable.size(); i++) {
            while (hashTable.get(inx).state != State.EMPTY) {
                if (Objects.equals(hashTable.get(inx).data, s) && hashTable.get(inx).state == State.FILLED) {
                    return true;
                }
                inx = (inx + hashF2) % hashTable.size();
                countIterations++;
                if (countIterations >= hashTable.size()) {
                    return false;
                }
            }
        }
        return false;
    }

    void push(String s) {
        resize();
        int hashF1 = hashF1(s, capacity);
        int hashF2 = hashF2(s, capacity);
        int inx = hashF1;
        int countIterations = 0;
        while (countIterations < hashTable.size()) {
            if (hashTable.get(inx).state == State.EMPTY || hashTable.get(inx).state == State.DELETED) {
                hashTable.get(inx).data = s;
                hashTable.get(inx).state = State.FILLED;
                filledElem++;
                return;
            }
            else if (hashTable.get(inx).state == State.DELETED && Objects.equals(hashTable.get(inx).data, s)) {
                hashTable.get(inx).state = State.FILLED;
                filledElem++;
                return;
            } else if (hashTable.get(inx).state == State.FILLED && Objects.equals(hashTable.get(inx).data, s)) {
                return;
            } else {
                inx = (inx + hashF2) % hashTable.size();
            }
            countIterations++;
        }
    }

    boolean pop(String s) {
        int hashF1 = hashF1(s, capacity);
        int hashF2 = hashF2(s, capacity);
        int id = hashF1;
        int countIterations = 0;
        while (hashTable.get(id).state == State.EMPTY || countIterations >= hashTable.size()) {
            if (hashTable.get(id).state == State.FILLED && Objects.equals(hashTable.get(id).data, s)) {
                hashTable.get(id).state = State.DELETED;
                filledElem--;
                return true;
            } else if (hashTable.get(id).state == State.DELETED) {
                id = (id + hashF2) % hashTable.size();
            }
            countIterations++;
        }
        return false;
    }

    void resize() {
        if (capacity <= hashTable.size() * threshold) {

            ArrayList<Node> hashTableOld = hashTable;
            capacity = capacity * threshold;
            filledElem = 0;
            ArrayList<Node> hashTable = new ArrayList<>(capacity);
            for (Node node : hashTableOld) {
                if (node.state == State.FILLED) {
                    hashTable.add(node);
                }
            }
        }
    }

    @Override
    public String toString() {
        return "HashTableOpenTesting{" +
                "capacity=" + capacity +
                ", filledElem=" + filledElem +
                ", hashTable=" + hashTable +
                '}';
    }
}

class Node {
    State state;
    String data;

    public Node() {
        this.state = State.EMPTY;
    }

    public Node(String data) {
        this.data = data;
        this.state = State.FILLED;
    }
}

enum State {
    EMPTY, DELETED, FILLED
}
